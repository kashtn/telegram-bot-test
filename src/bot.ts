import {
  Bot,
  Context,
  Keyboard,
  session,
  SessionFlavor,
  MemorySessionStorage,
  InlineKeyboard,
} from "grammy";
import { MenuFlavor } from "@grammyjs/menu";
import { HydrateFlavor, hydrate } from "@grammyjs/hydrate";

import dotenv from "dotenv";
// import mainMenu from "./menus/mainMenu";
// import weekMenu from "./menus/weekMenu";
// import dayMenu from "./menus/dayMenu";
// import timeOrMasterMenu from "./menus/timeOrMasterMenu";
// import masterMenu from "./menus/masterMenu";
// import timeMenu from "./menus/timeMenu";
// import confirmMenu from "./menus/confirmMenu";
// import procedureMenu from "./menus/procedureMenu";

// import { addNewClient, getUserByTelegramId } from "./api";
dotenv.config();

interface SessionData {
  currentDayTable: [][];

  allProcedures?: {};

  appointment: {
    week?: string;
    day?: string;
    time?: string;
    procedureId?: string;
    master: { name?: string; id?: number };
  };

  user: {
    phoneNumber?: string;
    fullName?: string;
    login?: string;
    telegramId?: number;
  };

  waitingForFullName?: boolean;
  waitingForContact?: boolean;
}

export type TContext = HydrateFlavor<
  Context & SessionFlavor<SessionData> & MenuFlavor
>;

const bot = new Bot<TContext>(process.env.BOT_ID as string);

// bot.use(hydrate());
// bot.use(
//   session({
//     initial: (): SessionData => ({
//       currentDayTable: [],
//       user: {},
//       appointment: { master: {} },
//     }),
//     storage: new MemorySessionStorage(),
//   })
// );

// menus register
// timeMenu.register(confirmMenu);

// masterMenu.register(confirmMenu);

// timeOrMasterMenu.register([masterMenu, timeMenu]);

// dayMenu.register(timeOrMasterMenu);

// weekMenu.register(dayMenu);

// procedureMenu.register(weekMenu);

// mainMenu.register(procedureMenu);

// bot.use(mainMenu);

//

bot.api.setMyCommands([
  // { command: "menu", description: "–ú–µ–Ω—é" },
  // { command: "help", description: "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º" },
  { command: "webapp", description: "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" },
]);

// –ö–æ–º–∞–Ω–¥–∞ /start
// bot.command("start", async (ctx) => {
//   console.log(ctx.from);

//   // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º"
//   const contactKeyboard = new Keyboard()
//     .requestContact("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º")
//     .resized() // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä
//     .oneTime(); // –°–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è

//   await ctx.reply("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å—Ç—É–¥–∏–∏ –º–∞–Ω–∏–∫—é—Ä–∞ ¬´–ù–æ–≥–æ—Ç–æ—á–∫–∏¬ª!");
//   await ctx.reply("üìû –î–ª—è –≤—Ö–æ–¥–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", {
//     reply_markup: contactKeyboard,
//   });

//   // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞
//   ctx.session.waitingForContact = true;
// });

bot.command("webapp", async (ctx) => {
  const keyboard = new InlineKeyboard()
    .webApp("–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "https://nail-studio-webapp.netlify.app/");

  await ctx.reply("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", {
    reply_markup: keyboard,
  });
});

// bot.on("web_app_data", async (ctx) => {
//   const dataFromWebApp = ctx.webAppData?.data; // –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
//   await ctx.reply(`–ü–æ–ª—É—á–µ–Ω–æ: ${dataFromWebApp}`);
// });

// bot.command("menu", async (ctx) => {
//   ctx.session = {
//     currentDayTable: [],
//     user: {},
//     appointment: { master: {} },
//   };

//   const { user, error } = await getUserByTelegramId(String(ctx.from?.id));
//   console.log("user", user);
//   console.log("error", error);

//   ctx.session.user = {
//     phoneNumber: user?.phone,
//     fullName: user?.name,
//     login: user?.telegram_login,
//     telegramId: user?.telegram_id,
//   };

//   if (!user && !ctx.session.user.phoneNumber) {
//     // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º"
//     const contactKeyboard = new Keyboard()
//       .requestContact("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º")
//       .resized() // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä
//       .oneTime(); // –°–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è

//     await ctx.reply("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å—Ç—É–¥–∏–∏ –º–∞–Ω–∏–∫—é—Ä–∞ ¬´–ù–æ–≥–æ—Ç–æ—á–∫–∏¬ª!");
//     await ctx.reply("üìû –î–ª—è –≤—Ö–æ–¥–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", {
//       reply_markup: contactKeyboard,
//     });

//     // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞
//     ctx.session.waitingForContact = true;
//   } else {
//     await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", { reply_markup: mainMenu });
//   }
// });

// bot.catch((err) => {
//   console.error("Error in bot:", err);
// });

// bot.on("message:contact", async (ctx) => {
//   if (!ctx.session.waitingForContact) return;

//   const contact = ctx.message.contact;

//   // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
//   if (contact.user_id !== ctx.from.id) {
//     await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –°–í–û–ò–ú –Ω–æ–º–µ—Ä–æ–º.");
//     return;
//   }
//   console.log("contact", contact);

//   const phoneNumber = contact.phone_number;

//   const telegramId = contact.user_id;

//   const login = ctx.from.username
//     ? `@${ctx.from.username}`
//     : contact.first_name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

//   // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
//   ctx.session.user.phoneNumber = phoneNumber;
//   ctx.session.user.login = login;
//   ctx.session.user.telegramId = telegramId;
//   ctx.session.waitingForContact = false;

//   // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
//   await ctx.reply("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ **–§–ò–û**:", {
//     parse_mode: "Markdown",
//     reply_markup: { remove_keyboard: true },
//   });

//   // –ñ–¥–µ–º –§–ò–û
//   ctx.session.waitingForFullName = true;
// });

// // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –§–ò–û)
// bot.on("message:text", async (ctx) => {
//   // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
//   if (ctx.session.waitingForContact) {
//     await ctx.reply("üìõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª**", {
//       parse_mode: "Markdown",
//     });
//     return;
//   }

//   // –ï—Å–ª–∏ –∂–¥–µ–º –§–ò–û ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
//   if (ctx.session.waitingForFullName) {
//     const fullName = ctx.message.text.trim();

//     if (fullName.split(" ").length < 2) {
//       await ctx.reply(
//         "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ **–ø–æ–ª–Ω–æ–µ –§–ò–û** (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)",
//         {
//           parse_mode: "Markdown",
//         }
//       );
//       return;
//     }

//     // –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û
//     ctx.session.user.fullName = fullName;
//     ctx.session.waitingForFullName = false;

//     await ctx.reply(`üéâ –û—Ç–ª–∏—á–Ω–æ, ${fullName}! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.`, {
//       reply_markup: mainMenu, // –í–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
//     });

//     const error = await addNewClient({
//       telegramId: ctx.session.user.telegramId || 0,
//       phoneNumber: ctx.session.user.phoneNumber || "",
//       telegramLogin: ctx.session.user.login || "",
//       userName: ctx.session.user.fullName,
//     });

//     console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", {
//       phoneNumber: ctx.session.user.phoneNumber,
//       fullName: ctx.session.user.fullName,
//       login: ctx.session.user.login,
//     });
//   }
// });

bot.start();
