import {
  Bot,
  Context,
  Keyboard,
  session,
  SessionFlavor,
  MemorySessionStorage,
} from "grammy";
import { getSheetData, insertClient } from "./googleSheets";
import dotenv from "dotenv";
import { EMenu } from "./menus/EMenu";
import mainMenu from "./menus/mainMenu";
import weekMenu from "./menus/weekMenu";
import dayMenu from "./menus/dayMenu";
import procedureMenu from "./menus/procedureMenu";
import timeOrMasterMenu from "./menus/timeOrMasterMenu";
import masterMenu from "./menus/masterMenu";
import timeMenu from "./menus/timeMenu";
import confirmMenu from "./menus/confirmMenu";
import supabaseClient from "./supabase";
dotenv.config();

interface SessionData {
  currentDayTable: [][];

  chosenWeek?: string;
  chosenDay?: string;
  chosenTime?: string;
  chosenProcedure?: string;
  chosenMaster?: string;

  phoneNumber?: string;
  fullName?: string;
  login?: string;
  telegramId?: number;
  waitingForFullName?: boolean;
  waitingForContact?: boolean;
}

type MyContext = Context & SessionFlavor<SessionData>;

const bot = new Bot<MyContext>(process.env.BOT_ID as string);

// Middleware to handle sessions
bot.use(
  session({
    initial: (): SessionData => ({
      currentDayTable: [],
      chosenDay: "",
      chosenTime: "",
      chosenProcedure: "",
      chosenMaster: "",
      chosenWeek: "",
    }),
    storage: new MemorySessionStorage(),
  })
);

bot.callbackQuery(/^time:/, async (ctx) => {
  const data = ctx.callbackQuery.data;

  const [, dateRange, hours, minutes] = data.split(":");

  await ctx.answerCallbackQuery();

  await ctx.deleteMessage();

  await ctx.reply(`‚úÖ–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞: ${dateRange} –≤ ${hours}:${minutes}`);

  insertClient(dateRange, `${hours}:${minutes}`);
});

// menus register
timeMenu.register(confirmMenu);

masterMenu.register(confirmMenu);

timeOrMasterMenu.register([masterMenu, timeMenu]);

dayMenu.register(timeOrMasterMenu);

weekMenu.register(dayMenu);

procedureMenu.register(weekMenu);

mainMenu.register(procedureMenu);

bot.use(mainMenu);

//

bot.api.setMyCommands([
  { command: "menu", description: "–ú–µ–Ω—é" },
  { command: "help", description: "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º" },
  { command: "data", description: "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É" },
]);

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command("start", async (ctx) => {
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º"
  const contactKeyboard = new Keyboard()
    .requestContact("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º")
    .resized() // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä
    .oneTime(); // –°–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è

  await ctx.reply("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å—Ç—É–¥–∏–∏ –º–∞–Ω–∏–∫—é—Ä–∞ ¬´–ù–æ–≥–æ—Ç–æ—á–∫–∏¬ª!");
  await ctx.reply("üìû –î–ª—è –≤—Ö–æ–¥–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", {
    reply_markup: contactKeyboard,
  });

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞
  ctx.session.waitingForContact = true;
});

bot.command("menu", async (ctx) => {
  if (!ctx.session.phoneNumber) {
    const keyboard = new Keyboard()
      .requestContact("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
      .resized() // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
      .oneTime(); // –°–∫—Ä—ã—Ç—å –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è

    await ctx.reply(
      "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —É–∫–∞–∂–∏—Ç–µ –§–ò–û:",
      {
        reply_markup: {
          keyboard: keyboard,
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      }
    );
  } else {
    await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", { reply_markup: mainMenu });
  }
});

bot.command("data", async (ctx) => {
  try {
    let { data: appointments, error } = await supabaseClient
      .from("appointments")
      .select("*")
      .eq("telegram_id", ctx.session.telegramId);

    // Filters

    // const rows = await getSheetData();

    // if (rows.length === 0) {
    //   await ctx.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ.");
    //   return;
    // }

    // const message = rows.map((row) => row.join(" | ")).join("\n");
    appointments?.forEach(async (appointment, index) => {
      await ctx.reply(
        `–ó–∞–ø–∏—Å—å ${index}: ${appointment.procedure}, ${appointment.date}, ${appointment.slot_time}`
      );
    });
  } catch (err) {
    console.error(err);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets");
  }
});

bot.catch((err) => {
  console.error("Error in bot:", err);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥)
bot.on("message:contact", async (ctx) => {
  if (!ctx.session.waitingForContact) return;

  const contact = ctx.message.contact;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
  if (contact.user_id !== ctx.from.id) {
    await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –°–í–û–ò–ú –Ω–æ–º–µ—Ä–æ–º.");
    return;
  }
  console.log("contact", contact);

  const phoneNumber = contact.phone_number;

  const telegramId = contact.user_id;

  const login = ctx.from.username
    ? `@${ctx.from.username}`
    : contact.first_name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
  ctx.session.phoneNumber = phoneNumber;
  ctx.session.login = login;
  ctx.session.telegramId = telegramId;
  ctx.session.waitingForContact = false;

  // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  await ctx.reply("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ **–§–ò–û**:", {
    parse_mode: "Markdown",
    reply_markup: { remove_keyboard: true },
  });

  // –ñ–¥–µ–º –§–ò–û
  ctx.session.waitingForFullName = true;
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –§–ò–û)
bot.on("message:text", async (ctx) => {
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
  if (ctx.session.waitingForContact) {
    await ctx.reply("üìõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª**", {
      parse_mode: "Markdown",
    });
    return;
  }

  // –ï—Å–ª–∏ –∂–¥–µ–º –§–ò–û ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
  if (ctx.session.waitingForFullName) {
    const fullName = ctx.message.text.trim();

    if (fullName.split(" ").length < 2) {
      await ctx.reply(
        "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ **–ø–æ–ª–Ω–æ–µ –§–ò–û** (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)",
        {
          parse_mode: "Markdown",
        }
      );
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û
    ctx.session.fullName = fullName;
    ctx.session.waitingForFullName = false;

    await ctx.reply(`üéâ –û—Ç–ª–∏—á–Ω–æ, ${fullName}! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.`, {
      reply_markup: mainMenu, // –í–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    });

    const { data, error } = await supabaseClient
      .from("clients")
      .insert([
        {
          telegram_id: ctx.session.telegramId,
          telegram_login: ctx.session.login,
          name: ctx.session.fullName,
          phone: ctx.session.phoneNumber,
        },
      ])
      .select();
    console.log("inserted data", data);
    console.log("error", error);

    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", {
      phoneNumber: ctx.session.phoneNumber,
      fullName: ctx.session.fullName,
      login: ctx.session.login,
    });
  }
});

bot.start();
